// <auto-generated />
using CricketApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CricketApp.Data.Migrations
{
    [DbContext(typeof(CricketContext))]
    [Migration("20180409114016_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CricketApp.Domain.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Password");

                    b.Property<string>("UserId");

                    b.Property<string>("contact");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("CricketApp.Domain.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateOfMatch");

                    b.Property<string>("GroundName");

                    b.Property<int>("HomeTeamId");

                    b.Property<byte[]>("MatchLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("MatchOvers");

                    b.Property<int>("OppponentTeamId");

                    b.Property<string>("Place");

                    b.Property<string>("Result");

                    b.Property<int?>("Season");

                    b.Property<string>("Status");

                    b.Property<int?>("TournamentId");

                    b.HasKey("MatchId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("OppponentTeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CricketApp.Domain.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("BattingStyle");

                    b.Property<string>("BowlingStyle");

                    b.Property<string>("CNIC");

                    b.Property<string>("Contact");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsGuestPlayer");

                    b.Property<int>("MatchId");

                    b.Property<byte[]>("PlayerLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Player_Name");

                    b.Property<string>("Role");

                    b.Property<string>("Status");

                    b.Property<int>("TeamId");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("CricketApp.Domain.PlayerScore", b =>
                {
                    b.Property<int>("PlayerScoreId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Ball_Runs");

                    b.Property<int?>("Bat_Balls");

                    b.Property<int?>("Bat_Runs");

                    b.Property<string>("Bowler");

                    b.Property<int?>("Catches");

                    b.Property<int?>("Four");

                    b.Property<string>("HowOut");

                    b.Property<bool>("IsPlayedInning");

                    b.Property<int?>("Maiden");

                    b.Property<int>("MatchId");

                    b.Property<int?>("Overs");

                    b.Property<int>("PlayerId");

                    b.Property<int>("Position");

                    b.Property<int?>("RunOut");

                    b.Property<int?>("Six");

                    b.Property<int?>("Stump");

                    b.Property<int?>("Wickets");

                    b.HasKey("PlayerScoreId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerScores");
                });

            modelBuilder.Entity("CricketApp.Domain.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Place");

                    b.Property<byte[]>("TeamLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Team_Name");

                    b.Property<string>("Zone");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CricketApp.Domain.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Organizor");

                    b.Property<string>("TournamentName");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("CricketApp.Domain.Match", b =>
                {
                    b.HasOne("CricketApp.Domain.Team", "HomeTeam")
                        .WithMany("HomeTeamMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CricketApp.Domain.Team", "OppponentTeam")
                        .WithMany("OpponentTeamMatches")
                        .HasForeignKey("OppponentTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CricketApp.Domain.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("CricketApp.Domain.Player", b =>
                {
                    b.HasOne("CricketApp.Domain.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CricketApp.Domain.PlayerScore", b =>
                {
                    b.HasOne("CricketApp.Domain.Match", "Match")
                        .WithMany("PlayerScores")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CricketApp.Domain.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
